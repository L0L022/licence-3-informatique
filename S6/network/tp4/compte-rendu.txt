1. TCP sur Réseau IPv6

Nous allons dans un premier temps nous concentrer sur TCP.
1.1. Un serveur netcat IPv6

Afin de pouvoir tester notre client, nous allons commencer par mettre en place un serveur simple en IPv6 avec la commande netcat

  $ nc -6 -l 1234

1.2. Client IPv6

    rappeler quelle est l'adresse locale de toute station en IPv6 ? tester en vous connectant avec votre précédent client IPv4.


e16006130@L-054011F108-15:~/git/licence-3-informatique/S6/network/tp3/tp3-java/target/classes$ java EchoTCPClient ::1 12345

    
    que se passe-t-il ? Pourquoi ?

client ok => ca fonctionne ! 
addr = InetAddress.getByName(args[0]); // fonctionne aussi bien avec une adresse ipv4 que ipv6

1.3. Serveur Ipv6

    lancer votre serveur du TP précédent
    tenter de vous connecter avec un client IPv6 (au choix)
    expliquer
    Modifier éventuellement votre code pour pouvoir vous connecter à votre serveur en IPv6.

Ca fonctionne. 



2. Double et simple pile
2.1. Définition

Qu'est-ce que la double pile IP ? En quoi est-ce utile dans un cadre applications réseaux ? 

les hôtes disposent d'une double pile, c'est-à-dire qu'ils disposent à la fois d'adresses IPv6 et IPv4, et des tunnels permettent de traverser les groupes de routeurs qui ne prennent pas encore en charge IPv6

Cela permet que les applications soient compatibles aussi bien en IPV4 qu'en IPV6


2.2. Implémentation côté Client

Comment le client décide-t-il quelle version du protocole utiliser

    si on lui donne directement une adresse ?

il va analyser l'adresse et déduire de lui même la version du protocole

    s'il se connecte via un nom de domaine (comme localhost ou ip6-localhost ou ... ) ?

je pense qu'il doit y avoir un truc configuré par défaut quelque part


A quoi servent java.net.preferIPv4Stack et java.net.preferIPv6Adresses ?  

    java.net.preferIPv4Stack (default: false)
    If IPv6 is available on the operating system the underlying native socket will be, by default, an IPv6 socket which lets applications connect to, and accept connections from, both IPv4 and IPv6 hosts. However, in the case an application would rather use IPv4 only sockets, then this property can be set to true. The implication is that it will not be possible for the application to communicate with IPv6 only hosts.

    java.net.preferIPv6Addresses (default: false)
    When dealing with a host which has both IPv4 and IPv6 addresses, and if IPv6 is available on the operating system, the default behavior is to prefer using IPv4 addresses over IPv6 ones. This is to ensure backward compatibility, for example applications that depend on the representation of an IPv4 address (e.g. 192.168.1.1). This property can be set to true to change that preference and use IPv6 addresses over IPv4 ones where possible.

Both of these properties are checked only once, at startup.

Comment configurer/réécrire votre serveur pour qu'il soit seulement IPv4 ou seulement IPv6 ?
-Djava.net.preferIPv4Stack=true -Djava.net.preferIPv6Addresses=false à la jvm soit seulement ipv4
-Djava.net.preferIPv4Stack=false -Djava.net.preferIPv6Addresses=true à la jvm seulement ipv6

Y a-t-il un intérêt à un serveur simple pile ? Ca doit être moins couteux (interessant pour les gros serveurs) 

2.4. Compatibilité

Pour conclure, écrire des scripts pour tester vos serveurs double-pile et simple-pile, consécutivement, avec les deux clients IPv4 et IPv6.

Loïc n'y arrive pas, mauvais larbin 

2.5. Influence du Système d'exploitation

Redémarrer votre station sous Windows et refaites les tests précédents. Quelle est la politique par défaut de Windows concernant la double pile IP ? 

